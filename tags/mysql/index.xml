<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MySQL on 德斯别尔-Des</title>
        <link>https://deisbeir.github.io/tags/mysql/</link>
        <description>Recent content in MySQL on 德斯别尔-Des</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>德斯别尔-Des</copyright>
        <lastBuildDate>Tue, 31 Dec 2024 16:36:08 +0800</lastBuildDate><atom:link href="https://deisbeir.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MySQL索引</title>
        <link>https://deisbeir.github.io/p/mysql%E7%B4%A2%E5%BC%95/</link>
        <pubDate>Tue, 31 Dec 2024 16:36:08 +0800</pubDate>
        
        <guid>https://deisbeir.github.io/p/mysql%E7%B4%A2%E5%BC%95/</guid>
        <description>&lt;img src="https://deisbeir.github.io/p/mysql%E7%B4%A2%E5%BC%95/show.png" alt="Featured image of post MySQL索引" /&gt;&lt;h1 id=&#34;mysql索引&#34;&gt;MySQL索引
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构。&lt;/p&gt;
&lt;h3 id=&#34;二叉查找树bst&#34;&gt;二叉查找树(BST)
&lt;/h3&gt;&lt;p&gt;二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构，它具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左子树所有节点的值均小于根节点的值。&lt;/li&gt;
&lt;li&gt;右子树所有节点的值均大于根节点的值。&lt;/li&gt;
&lt;li&gt;左右子树也分别为二叉查找树。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。&lt;/p&gt;
&lt;img src=&#34;1.png&#34; alt=&#34;image-20241231230328537&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;也就是说，&lt;strong&gt;二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。&lt;/p&gt;
&lt;h3 id=&#34;avl-树&#34;&gt;AVL 树
&lt;/h3&gt;&lt;p&gt;AVL 树是计算机科学中最早被发明的自平衡二叉查找树，它的名称来自于发明者 G.M. Adelson-Velsky 和 E.M. Landis 的名字缩写。AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。&lt;/p&gt;
&lt;img src=&#34;2.png&#34; alt=&#34;image-20241231230516769&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;AVL 树采用了旋转操作来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。&lt;/p&gt;
&lt;p&gt;由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了数据库写操作的性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 &lt;strong&gt;磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;红黑树&#34;&gt;红黑树
&lt;/h3&gt;&lt;p&gt;红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，它具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点非红即黑；&lt;/li&gt;
&lt;li&gt;根节点总是黑色的；&lt;/li&gt;
&lt;li&gt;每个叶子节点都是黑色的空节点（NIL 节点）；&lt;/li&gt;
&lt;li&gt;如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；&lt;/li&gt;
&lt;li&gt;从任意节点到它的叶子节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;3.png&#34; alt=&#34;image-20241231230516769&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。也正因如此，红黑树的插入和删除操作效率大大提高了，因为红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，而不需要像 AVL 树一样进行 O(logn) 次数的旋转操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;b-树&#34;&gt;B 树
&lt;/h3&gt;&lt;p&gt;B 树全称为 &lt;strong&gt;多路平衡查找树&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;在 B 树中，有两种节点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内部节点（internal node）：存储了数据以及指向其子节点的指针。&lt;/li&gt;
&lt;li&gt;叶子节点（leaf node）：与内部节点不同的是，叶子节点只存储数据，并没有子节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;m阶的 B 树的特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	表示这个树的每一个节点最多可以拥有的子节点个数。一棵m阶的 B 树满足的性质如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点最多有m个子节点。&lt;/li&gt;
&lt;li&gt;每一个非叶子节点（除根节点）最少有  $\frac{m}{2}$ 个子节点。&lt;/li&gt;
&lt;li&gt;如果根节点不是叶子节点，那么它至少有两个子节点。&lt;/li&gt;
&lt;li&gt;有K个子节点的非叶子节点拥有k-1个键，且升序排列，满足k[i]&amp;lt;k[i+1]。&lt;/li&gt;
&lt;li&gt;所有的叶子节点都在同一层。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;4.png&#34; alt=&#34;image-20241231232004768&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h5 id=&#34;b-树优势&#34;&gt;B 树优势
&lt;/h5&gt;&lt;p&gt;之前已经介绍过二叉查找树。但是这类型数据结构的问题在于，由于每个节点只能容纳一个数据，导致树的高度很高，逻辑上挨着的节点数据可能离得很远。&lt;/p&gt;
&lt;p&gt;考虑在磁盘中存储数据的情况，与内存相比，读写磁盘有以下不同点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读写磁盘的速度相比内存读写慢很多。&lt;/li&gt;
&lt;li&gt;每次读写磁盘的单位要比读写内存的最小单位大很多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于读写磁盘的这个特点，因此对应的数据结构应该尽量的满足「局部性原理」：「当一个数据被用到时，其附近的数据也通常会马上被使用」，为了满足局部性原理，所以应该将逻辑上相邻的数据在物理上也尽量存储在一起。这样才能减少读写磁盘的数量。&lt;/p&gt;
&lt;p&gt;所以，对比起一个节点只能存储一个数据的 BST 类数据结构来，要求这种数据结构在形状上更「胖」、更加「扁平」，即：每个节点能容纳更多的数据，这样就能降低树的高度，同时让逻辑上相邻的数据都能尽量存储在物理上也相邻的硬盘空间上，减少磁盘读写。&lt;/p&gt;
&lt;h3 id=&#34;b树&#34;&gt;B+树
&lt;/h3&gt;&lt;p&gt;B+ 树是 B 树 的一个升级，它比 B 树更适合实际应用中操作系统的文件索引和数据库索引。&lt;/p&gt;
&lt;p&gt;B+ 树是一种多叉排序树，即每个节点通常有多个孩子。一棵 B+ 树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。&lt;/p&gt;
&lt;p&gt;B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m阶 B+ 树的特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	m表示这个树的每一个节点最多可以拥有的子节点个数。一棵m阶的 B+ 树和 B 树的差异在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有n棵子树的节点中含有n-1个关键字（即将区间分为n个子区间，每个子区间对应一棵子树)。&lt;/li&gt;
&lt;li&gt;所有叶子节点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子节点本身依关键字的大小自小而大顺序链接。&lt;/li&gt;
&lt;li&gt;所有的非叶子节点可以看成是索引部分，节点中仅含有其子树（根节点）中的最大（或最小）关键字。&lt;/li&gt;
&lt;li&gt;除根节点外，其他所有节点中所含关键字的个数最少有 $\frac{m}{2}$（注意：B 树中除根以外的所有非叶子节点至少有$\frac{m}{2}$棵子树)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时，B+ 树为了方便范围查询，叶子节点之间还用指针串联起来。&lt;/p&gt;
&lt;img src=&#34;5.png&#34; alt=&#34;image-20241231232004768&#34; style=&#34;zoom:100%;&#34; /&gt;
&lt;h4 id=&#34;b-树相比于-b-树的优势&#34;&gt;B+ 树相比于 B 树的优势
&lt;/h4&gt;&lt;p&gt;由于索引节点上只有索引而没有数据，所以索引节点上能存储比 B 树更多的索引，这样树的高度就会更矮。树的高度越矮，磁盘寻道的次数就会越少。&lt;/p&gt;
&lt;p&gt;因为数据都集中在叶子节点，而所有叶子节点的高度相同，那么可以在叶子节点中增加前后指针，指向同一个父节点的相邻兄弟节点，这样可以更好地支持查询一个值的前驱或后继，使连续访问更容易实现。&lt;/p&gt;
&lt;p&gt;比如这样的 SQL 语句：&lt;code&gt;select * from tbl where t &amp;gt; 10&lt;/code&gt;，如果使用 B+ 树存储数据的话，可以首先定位到数据为 10 的节点，再沿着它的 &lt;code&gt;next&lt;/code&gt; 指针一路找到所有在该叶子节点右边的叶子节点，返回这些节点包含的数据。&lt;/p&gt;
&lt;h2 id=&#34;主键索引primary-key&#34;&gt;主键索引(Primary Key)
&lt;/h2&gt;&lt;p&gt;数据表的主键列使用的就是主键索引。&lt;/p&gt;
&lt;p&gt;一张数据表有只能有一个主键，并且主键不能为 null，不能重复。&lt;/p&gt;
&lt;p&gt;在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。&lt;/p&gt;
&lt;h2 id=&#34;二级索引&#34;&gt;二级索引
&lt;/h2&gt;&lt;p&gt;二级索引（Secondary Index）的叶子节点存储的数据是主键的值，也就是说，通过二级索引可以定位主键的位置，二级索引又称为辅助索引/非主键索引。&lt;/p&gt;
&lt;p&gt;唯一索引，普通索引，前缀索引等索引都属于二级索引。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;唯一索引(Unique Key)&lt;/strong&gt;:唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;普通索引(Index)&lt;/strong&gt;:普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前缀索引(Prefix)&lt;/strong&gt;:前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全文索引(Full Text)&lt;/strong&gt;:全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;覆盖索引&#34;&gt;覆盖索引
&lt;/h2&gt;&lt;p&gt;如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 &lt;strong&gt;覆盖索引（Covering Index）&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;在 InnoDB 存储引擎中，非主键索引的叶子节点包含的是主键的值。这意味着，当使用非主键索引进行查询时，数据库会先找到对应的主键值，然后再通过主键索引来定位和检索完整的行数据。这个过程被称为“回表”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;联合索引&#34;&gt;联合索引
&lt;/h3&gt;&lt;p&gt;使用表中的多个字段创建索引，就是 &lt;strong&gt;联合索引&lt;/strong&gt;，也叫 &lt;strong&gt;组合索引&lt;/strong&gt; 或 &lt;strong&gt;复合索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;最左前缀匹配原则&#34;&gt;最左前缀匹配原则
&lt;/h4&gt;&lt;p&gt;最左前缀匹配原则指的是在使用联合索引时，MySQL 会根据索引中的字段顺序，从左到右依次匹配查询条件中的字段。如果查询条件与索引中的最左侧字段相匹配，那么 MySQL 就会使用索引来过滤数据，这样可以提高查询效率。&lt;/p&gt;
&lt;p&gt;最左匹配原则会一直向右匹配，直到遇到范围查询（如 &amp;gt;、&amp;lt;）为止。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;顺序的重要性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;复合索引的列顺序非常重要，查询条件必须从最左列开始匹配。&lt;/li&gt;
&lt;li&gt;例如，索引 &lt;code&gt;(name, age)&lt;/code&gt; 不能用于查询 &lt;code&gt;WHERE age = 30&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围查询的影响&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;范围查询会中断索引的匹配，其右边的列不会被索引使用。&lt;/li&gt;
&lt;li&gt;例如，索引 &lt;code&gt;(name, age, email)&lt;/code&gt; 在查询 &lt;code&gt;WHERE name = &#39;John&#39; AND age &amp;gt; 30 AND email = &#39;test@example.com&#39;&lt;/code&gt; 中，只有 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;age&lt;/code&gt; 列会被索引使用，&lt;code&gt;email&lt;/code&gt; 列不会被索引使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;覆盖索引&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果查询的列都包含在复合索引中，MySQL 可以直接从索引中获取数据，而无需回表。&lt;/li&gt;
&lt;li&gt;例如，索引 &lt;code&gt;(name, age)&lt;/code&gt; 可以用于查询 &lt;code&gt;SELECT name, age FROM users WHERE name = &#39;John&#39;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;索引下推&#34;&gt;索引下推
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;索引下推（Index Condition Pushdown，简称 ICP）&lt;/strong&gt; 是 &lt;strong&gt;MySQL 5.6&lt;/strong&gt; 版本中提供的一项索引优化功能，它允许存储引擎在索引遍历过程中，执行部分 &lt;code&gt;WHERE&lt;/code&gt;字句的判断条件，直接过滤掉不满足条件的记录，从而减少回表次数，提高查询效率。&lt;/p&gt;
&lt;img src=&#34;6.png&#34; alt=&#34;image-20241231232004768&#34; style=&#34;zoom:77%;&#34; /&gt;
&lt;p&gt;MySQL 可以简单分为 Server 层和存储引擎层这两层。Server 层处理查询解析、分析、优化、缓存以及与客户端的交互等操作，而存储引擎层负责数据的存储和读取，MySQL 支持 InnoDB、MyISAM、Memory 等多种存储引擎。&lt;/p&gt;
&lt;p&gt;索引下推的&lt;strong&gt;下推&lt;/strong&gt;其实就是指将部分上层（Server 层）负责的事情，交给了下层（存储引擎层）去处理。&lt;/p&gt;
&lt;p&gt;在传统的查询执行过程中，存储引擎会根据索引查找数据，然后将所有匹配索引条件的数据返回到服务器层，服务器层再根据其他条件进行过滤。而索引下推则允许存储引擎在索引查找阶段直接应用部分查询条件，从而减少返回给服务器层的数据量。&lt;/p&gt;
&lt;h4 id=&#34;示例&#34;&gt;&lt;strong&gt;示例&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;假设有一个表 &lt;code&gt;users&lt;/code&gt;，结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;VARCHAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;age&lt;/code&gt; 列上创建复合索引：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATE INDEX idx_name_age ON users(name, age);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行以下查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT * FROM users WHERE name = &amp;#39;John&amp;#39; AND age &amp;gt; 30;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;传统查询过程&#34;&gt;&lt;strong&gt;传统查询过程&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;存储引擎使用索引 &lt;code&gt;idx_name_age&lt;/code&gt; 查找 &lt;code&gt;name = &#39;John&#39;&lt;/code&gt; 的所有数据。&lt;/li&gt;
&lt;li&gt;将所有 &lt;code&gt;name = &#39;John&#39;&lt;/code&gt; 的数据返回到服务器层。&lt;/li&gt;
&lt;li&gt;服务器层根据 &lt;code&gt;age &amp;gt; 30&lt;/code&gt; 进行过滤。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;索引下推查询过程&#34;&gt;&lt;strong&gt;索引下推查询过程&lt;/strong&gt;
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;存储引擎使用索引 &lt;code&gt;idx_name_age&lt;/code&gt; 查找 &lt;code&gt;name = &#39;John&#39;&lt;/code&gt; 的数据。&lt;/li&gt;
&lt;li&gt;在索引查找阶段，直接应用 &lt;code&gt;age &amp;gt; 30&lt;/code&gt; 的条件，过滤掉不符合条件的数据。&lt;/li&gt;
&lt;li&gt;只将 &lt;code&gt;name = &#39;John&#39;&lt;/code&gt; 且 &lt;code&gt;age &amp;gt; 30&lt;/code&gt; 的数据返回到服务器层。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;索引下推的优势&#34;&gt;&lt;strong&gt;索引下推的优势&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以减少回表次数之外，索引下推还可以减少存储引擎层和 Server 层的数据传输量。&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;适用于执行计划是 range, ref, eq_ref, ref_or_null 的范围查询。&lt;/li&gt;
&lt;li&gt;对于 InnoDB 表，仅用于非聚簇索引。索引下推的目标是减少全行读取次数，从而减少 I/O 操作。对于 InnoDB 聚集索引，完整的记录已经读入 InnoDB 缓冲区。在这种情况下使用索引下推 不会减少 I/O。&lt;/li&gt;
&lt;li&gt;子查询不能使用索引下推，因为子查询通常会创建临时表来处理结果，而这些临时表是没有索引的。&lt;/li&gt;
&lt;li&gt;存储过程不能使用索引下推，因为存储引擎无法调用存储函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MySQL</title>
        <link>https://deisbeir.github.io/p/mysql/</link>
        <pubDate>Mon, 30 Dec 2024 15:46:45 +0800</pubDate>
        
        <guid>https://deisbeir.github.io/p/mysql/</guid>
        <description>&lt;img src="https://deisbeir.github.io/p/mysql/show.png" alt="Featured image of post MySQL" /&gt;&lt;h3 id=&#34;什么是关系型数据库&#34;&gt;什么是关系型数据库？
&lt;/h3&gt;&lt;p&gt;顾名思义，关系型数据库（RDB，Relational Database）就是一种建立在关系模型的基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系（一对一、一对多、多对多）。&lt;/p&gt;
&lt;h2 id=&#34;mysql-字段类型&#34;&gt;MySQL 字段类型
&lt;/h2&gt;&lt;p&gt;MySQL 字段类型可以简单分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数值类型&lt;/strong&gt;：整型（TINYINT、SMALLINT、MEDIUMINT、INT 和 BIGINT）、浮点型（FLOAT 和 DOUBLE）、定点型（DECIMAL）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串类型&lt;/strong&gt;：CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB 等，最常用的是 CHAR 和 VARCHAR。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日期时间类型&lt;/strong&gt;：YEAR、TIME、DATE、DATETIME 和 TIMESTAMP 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-索引&#34;&gt;MySQL 索引
&lt;/h2&gt;&lt;h4 id=&#34;mysql-查询缓存&#34;&gt;MySQL 查询缓存
&lt;/h4&gt;&lt;p&gt;MySQL 查询缓存是查询结果缓存。执行查询语句的时候，会先查询缓存，如果缓存中有对应的查询结果，就会直接返回。&lt;/p&gt;
&lt;p&gt;查询缓存会在同样的查询条件和数据情况下，直接返回缓存中的结果。但需要注意的是，查询缓存的匹配条件非常严格，任何细微的差异都会导致缓存无法命中。这里的查询条件包括查询语句本身、当前使用的数据库、以及其他可能影响结果的因素，如客户端协议版本号等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询缓存不命中的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任何两个查询在任何字符上的不同都会导致缓存不命中。&lt;/li&gt;
&lt;li&gt;如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、MySQL 库中的系统表，其查询结果也不会被缓存。&lt;/li&gt;
&lt;li&gt;缓存建立之后，MySQL 的查询缓存系统会跟踪查询中涉及的每张表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;mysql-事务&#34;&gt;MySQL 事务
&lt;/h2&gt;&lt;h4 id=&#34;何谓事务&#34;&gt;何谓事务？
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;何谓数据库事务&#34;&gt;何谓数据库事务？
&lt;/h4&gt;&lt;p&gt;大多数情况下，我们在谈论事务的时候，如果没有特指&lt;strong&gt;分布式事务&lt;/strong&gt;，往往指的就是&lt;strong&gt;数据库事务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;数据库事务在我们日常开发中接触的最多了。如果你的项目属于单体架构的话，你接触到的往往就是数据库事务了。&lt;/p&gt;
&lt;p&gt;数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：&lt;strong&gt;要么全部执行成功,要么全部不执行&lt;/strong&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;开启一个事务&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;START&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;多条&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语句&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQL1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SQL2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;提交事务&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;img src=&#34;2.png&#34; alt=&#34;image-20241230163002562&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;另外，关系型数据库（例如：&lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;SQL Server&lt;/code&gt;、&lt;code&gt;Oracle&lt;/code&gt; 等）事务都有 &lt;strong&gt;ACID&lt;/strong&gt; 特性：&lt;/p&gt;
&lt;img src=&#34;3.png&#34; alt=&#34;image-20241230163002562&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（&lt;code&gt;Atomicity&lt;/code&gt;）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（&lt;code&gt;Consistency&lt;/code&gt;）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（&lt;code&gt;Isolation&lt;/code&gt;）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（&lt;code&gt;Durability&lt;/code&gt;）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;并发事务带来了哪些问题&#34;&gt;并发事务带来了哪些问题?
&lt;/h3&gt;&lt;p&gt;在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。&lt;/p&gt;
&lt;h4 id=&#34;脏读dirty-read&#34;&gt;脏读（Dirty read）
&lt;/h4&gt;&lt;p&gt;一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。&lt;/p&gt;
&lt;h4 id=&#34;丢失修改lost-to-modify&#34;&gt;丢失修改（Lost to modify）
&lt;/h4&gt;&lt;p&gt;在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。&lt;/p&gt;
&lt;h4 id=&#34;不可重复读unrepeatable-read&#34;&gt;不可重复读（Unrepeatable read）
&lt;/h4&gt;&lt;p&gt;指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。&lt;/p&gt;
&lt;h4 id=&#34;幻读phantom-read&#34;&gt;幻读（Phantom read）
&lt;/h4&gt;&lt;p&gt;幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;h3 id=&#34;不可重复读和幻读有什么区别&#34;&gt;不可重复读和幻读有什么区别？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；&lt;/li&gt;
&lt;li&gt;幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幻读其实可以看作是不可重复读的一种特殊情况，单独把幻读区分出来的原因主要是解决幻读和不可重复读的方案不一样。&lt;/p&gt;
&lt;h3 id=&#34;并发事务的控制方式有哪些&#34;&gt;并发事务的控制方式有哪些？
&lt;/h3&gt;&lt;p&gt;MySQL 中并发事务的控制方式无非就两种：&lt;strong&gt;锁&lt;/strong&gt; 和 &lt;strong&gt;MVCC&lt;/strong&gt;。锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversion concurrency control）可以看作是乐观控制的模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锁&lt;/strong&gt; 控制方式下会通过锁来显式控制共享资源而不是通过调度手段，MySQL 中主要是通过 &lt;strong&gt;读写锁&lt;/strong&gt; 来实现并发控制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共享锁（S 锁）&lt;/strong&gt;：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他锁（X 锁）&lt;/strong&gt;：又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写锁可以做到读读并行，但是无法做到写读、写写并行。另外，根据根据锁粒度的不同，又被分为 &lt;strong&gt;表级锁(table-level locking)&lt;/strong&gt; 和 &lt;strong&gt;行级锁(row-level locking)&lt;/strong&gt; 。InnoDB 不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVCC&lt;/strong&gt; 是多版本并发控制方法，即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。&lt;/p&gt;
&lt;p&gt;MVCC 在 MySQL 中实现所依赖的手段主要是: &lt;strong&gt;隐藏字段、read view、undo log&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undo log : undo log 用于记录某行数据的多个版本的数据。&lt;/li&gt;
&lt;li&gt;read view 和 隐藏字段 : 用来判断当前版本数据的可见性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sql-标准定义了哪些事务隔离级别&#34;&gt;SQL 标准定义了哪些事务隔离级别?
&lt;/h3&gt;&lt;p&gt;SQL 标准定义了四个隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;READ-UNCOMMITTED(读取未提交)&lt;/strong&gt; ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;READ-COMMITTED(读取已提交)&lt;/strong&gt; ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REPEATABLE-READ(可重复读)&lt;/strong&gt; ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SERIALIZABLE(可串行化)&lt;/strong&gt; ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;隔离级别&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;脏读&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;不可重复读&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;幻读&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;READ-UNCOMMITTED&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;READ-COMMITTED&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;REPEATABLE-READ&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;√&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;SERIALIZABLE&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;×&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;mysql-的隔离级别是基于锁实现的吗&#34;&gt;MySQL 的隔离级别是基于锁实现的吗？
&lt;/h3&gt;&lt;p&gt;MySQL 的隔离级别基于锁和 MVCC 机制共同实现的。&lt;/p&gt;
&lt;p&gt;SERIALIZABLE 隔离级别是通过锁来实现的，READ-COMMITTED 和 REPEATABLE-READ 隔离级别是基于 MVCC 实现的。不过， SERIALIZABLE 之外的其他隔离级别可能也需要用到锁机制，就比如 REPEATABLE-READ 在当前读情况下需要使用加锁读来保证不会出现幻读。&lt;/p&gt;
&lt;p&gt;MySQL InnoDB 存储引擎的默认支持的隔离级别是 &lt;strong&gt;REPEATABLE-READ（可重读）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;mysql-性能怎么优化&#34;&gt;MySQL 性能怎么优化？
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 抓住核心：慢 SQL 定位与分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性能优化的第一步永远是找到瓶颈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监控工具：&lt;/strong&gt; 介绍常用的慢 SQL 监控工具，如 &lt;strong&gt;MySQL 慢查询日志&lt;/strong&gt;、&lt;strong&gt;Performance Schema&lt;/strong&gt; 等，说明你对这些工具的熟悉程度以及如何通过它们定位问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EXPLAIN 命令：&lt;/strong&gt; 详细说明 &lt;code&gt;EXPLAIN&lt;/code&gt; 命令的使用，分析查询计划、索引使用情况，可以结合实际案例展示如何解读分析结果，比如执行顺序、索引使用情况、全表扫描等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 由点及面：索引、表结构和 SQL 优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位到慢 SQL 后，接下来就要针对具体问题进行优化。 这里可以重点介绍索引、表结构和 SQL 编写规范等方面的优化技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引优化：&lt;/strong&gt; 这是 MySQL 性能优化的重点，可以介绍索引的创建原则、覆盖索引、最左前缀匹配原则等。如果能结合你项目的实际应用来说明如何选择合适的索引，会更加分一些。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表结构优化：&lt;/strong&gt; 优化表结构设计，包括选择合适的字段类型、避免冗余字段、合理使用范式和反范式设计等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL 优化：&lt;/strong&gt; 避免使用 &lt;code&gt;SELECT *&lt;/code&gt;、尽量使用具体字段、使用连接查询代替子查询、合理使用分页查询、批量操作等，都是 SQL 编写过程中需要注意的细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 进阶方案：架构优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当面试官对基础优化知识比较满意时，可能会深入探讨一些架构层面的优化方案。以下是一些常见的架构优化策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读写分离：&lt;/strong&gt; 将读操作和写操作分离到不同的数据库实例，提升数据库的并发处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分库分表：&lt;/strong&gt; 将数据分散到多个数据库实例或数据表中，降低单表数据量，提升查询效率。但要权衡其带来的复杂性和维护成本，谨慎使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据冷热分离&lt;/strong&gt;：根据数据的访问频率和业务重要性，将数据分为冷数据和热数据，冷数据一般存储在存储在低成本、低性能的介质中，热数据高性能存储介质中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存机制：&lt;/strong&gt; 使用 Redis 等缓存中间件，将热点数据缓存到内存中，减轻数据库压力。这个非常常用，提升效果非常明显，性价比极高！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 其他优化手段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了慢 SQL 定位、索引优化和架构优化，还可以提及一些其他优化手段，展示你对 MySQL 性能调优的全面理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接池配置：&lt;/strong&gt; 配置合理的数据库连接池（如 &lt;strong&gt;连接池大小&lt;/strong&gt;、&lt;strong&gt;超时时间&lt;/strong&gt; 等），能够有效提升数据库连接的效率，避免频繁的连接开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;硬件配置：&lt;/strong&gt; 提升硬件性能也是优化的重要手段之一。使用高性能服务器、增加内存、使用 &lt;strong&gt;SSD&lt;/strong&gt; 硬盘等硬件升级，都可以有效提升数据库的整体性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;读写分离：&lt;/strong&gt; 将读操作和写操作分离到不同的数据库实例，提升数据库的并发处理能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分库分表：&lt;/strong&gt; 将数据分散到多个数据库实例或数据表中，降低单表数据量，提升查询效率。但要权衡其带来的复杂性和维护成本，谨慎使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据冷热分离&lt;/strong&gt;：根据数据的访问频率和业务重要性，将数据分为冷数据和热数据，冷数据一般存储在存储在低成本、低性能的介质中，热数据高性能存储介质中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缓存机制：&lt;/strong&gt; 使用 Redis 等缓存中间件，将热点数据缓存到内存中，减轻数据库压力。这个非常常用，提升效果非常明显，性价比极高！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 其他优化手段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了慢 SQL 定位、索引优化和架构优化，还可以提及一些其他优化手段，展示你对 MySQL 性能调优的全面理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接池配置：&lt;/strong&gt; 配置合理的数据库连接池（如 &lt;strong&gt;连接池大小&lt;/strong&gt;、&lt;strong&gt;超时时间&lt;/strong&gt; 等），能够有效提升数据库连接的效率，避免频繁的连接开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件配置：&lt;/strong&gt; 提升硬件性能也是优化的重要手段之一。使用高性能服务器、增加内存、使用 &lt;strong&gt;SSD&lt;/strong&gt; 硬盘等硬件升级，都可以有效提升数据库的整体性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文内容基本来自&lt;a class=&#34;link&#34; href=&#34;https://javaguide.cn/database/mysql/mysql-questions-01.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JavaGuide&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
